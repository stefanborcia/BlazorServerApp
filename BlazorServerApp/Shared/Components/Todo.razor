@page "/todo"
@using BlazorServerApp.Services
@using BlazorServerApp.Data
@inject TodoService TodoService
@inject TodoDbContext _context;

<h3 class="text-center">Todo (@todos.Count(todo => !todo.IsDone))</h3>

<div class="card-group d-flex justify-content-between ">
    <div class="card bg-light mb-3 w-100">
        <div class="card-header text-center">Todo Task</div>
        <div class="card-body">
            <input @bind="newTodo.Task" type="text" class="form-control" required @oninput="ClearTaskError" placeholder="Enter your task..." />
            <div class="text-danger" style="display: @(errorMessage != null ? "block" : "none")">
                @errorMessage 
            </div>
        </div>
    </div>

    <div class="card bg-light mb-3 w-100">
        <div class="card-header text-center">Due Date & Due Time</div> <div class="card-body">
            @{
                var minDate = DateTime.Now.ToString("yyyy-MM-dd");
            }
            <div class="d-flex justify-content-around">
                <div>
                    <input @bind="newTodo.DueDate" type="date" class="form-control" required min="@minDate" @oninput="ClearDateError" />
                </div>
                <div>
                    <input @bind="newTodo.DueTime" type="time" class="form-control" required />
                </div>
            </div>
            <div class="text-danger" style="display: @(dateErrorMessage != null ? "block" : "none")">@dateErrorMessage</div>
        </div>
    </div>

    <div class="card bg-light mb-3 w-100">
        <div class="card-header text-center">Choose Priority</div>
        <div class="card-body">
            <select @bind="newTodo.Priority" class="form-select">
                <option value="High">High</option>
                <option value="Normal" selected>Normal</option>
                <option value="Low">Low</option>
            </select>
        </div>
    </div>
</div>
<div class="text-center">
    <button id="addTodo" @onclick="AddTodoAsync" class="btn btn-success">Add todo</button>
</div>
<table class="table table-fit mt-5">
    <thead>
        <tr>
            <th>Done</th>
            <th>Task</th>
            <th>Due Date & Due Time</th>
            <th class="text-center">Priority</th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todos)
        {
            <tr>
                <td width="15%"><input type="checkbox" @bind="todo.IsDone" /></td>
                <td width="50%">@todo.Task</td>
                <td>
                    <div style="display: flex">
                        <div style="margin-right: 5px">
                            @if (todo.DueDate.HasValue && todo.DueTime.HasValue)
                            {
                                @(todo.DueDate.Value.Add(todo.DueTime.Value.ToTimeSpan()).ToString("d MMM yyyy, h:mm tt"))
                            }
                            else
                            {
                                @:N/A
                            }
                        </div>
                        <div class="text-danger" style="display: @(dateErrorMessage != null ? "block" : "none")">
                        </div>
                    </div>
                </td>
                <td width="15%" class="badge badge-center badge-fit"
                    style="@($"background-color: {(todo.Priority == "High" ? "red" : todo.Priority == "Normal" ? "orange" : "yellow")};")">
                    @todo.Priority
                </td>
                <td width="10%">
                    <div class="delete">
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTodo(todo)">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TodoItem> todos = new();
    public TodoItem newTodo = new TodoItem();
    private string errorMessage;
    private string dateErrorMessage;
    private TodoItem editingTodo;
    private bool isEditing;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetTodosAsync();
    }
    async Task AddTodoAsync()
    {
        if (string.IsNullOrWhiteSpace(newTodo.Task))
        {
            errorMessage = "This field is required.";
        }
        else if (newTodo.DueDate <= DateTime.Now)
        {
            dateErrorMessage = "Due date cannot be in the past.";
        }
        else if (!newTodo.DueDate.HasValue)
        {
            dateErrorMessage = "Please select a due date.";
        }
        else if (!newTodo.DueTime.HasValue)
        {
            dateErrorMessage = "Please select a time.";
        }
        else
        {
            var todoItem = new TodoItem
            {
                Task = newTodo.Task,
                DueDate = newTodo.DueDate,
                DueTime = newTodo.DueTime,
                Priority = newTodo.Priority
            };

            await TodoService.AddTodoAsync(todoItem);
            todos = await TodoService.GetTodosAsync(); // Refresh list
            errorMessage = null;
            dateErrorMessage = null;

            // Clear input fields after adding todo
            newTodo.Task = "";
            newTodo.DueDate = null;
            newTodo.DueTime = null;
            newTodo.Priority = "Normal";

            // Notify Blazor to update UI
            StateHasChanged();
        }
    }
    async Task DeleteTodo(TodoItem todo) 
    {
        await TodoService.DeleteTodoAsync(todo);
        todos = await TodoService.GetTodosAsync(); // Refresh list
        StateHasChanged(); 
    }
    void ClearTaskError()
    {
        errorMessage = null;
    }

    void ClearDateError()
    {
        dateErrorMessage = null;
    }
}
